/*
	Scale3xEX
	by Sp00kyFox, 2014

Filter:	Nearest
Scale:	3x

Scale3xEX improves upon the interpolation of the original algorithm. Now it smoothes out 45° edges perfectly. 

*/


bool eq(float3 A, float3 B){
	return all(A==B);
}

bool neq(float3 A, float3 B){
	return any(A!=B);
}

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};


struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
	float4 t3 : TEXCOORD3;
	float4 t4 : TEXCOORD4;
	float4 t5 : TEXCOORD5;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1 = texCoord.xxxy + float4(  -dx,    0,   dx,  -dy);	// A, B, C
	OUT.t2 = texCoord.xxxy + float4(  -dx,    0,   dx,    0);	// D, E, F
	OUT.t3 = texCoord.xxxy + float4(  -dx,    0,   dx,   dy);	// G, H, I
	OUT.t4 = texCoord.xyxy + float4(    0,-2*dy,-2*dx,    0);	// J, K
	OUT.t5 = texCoord.xyxy + float4( 2*dx,    0,    0, 2*dy);	// L, M

	return OUT;
}


float3 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	// subpixel determination
	float2 fp = floor(3.0 * frac(VAR.texCoord*IN.texture_size));

	/*
		    J
		  A B C		E0 E1 E2
		K D E F L	E3 E4 E5
		  G H I		E6 E7 E8
		    M
	*/

	// reading the texels
	float3 A = tex2D(decal, VAR.t1.xw).xyz;
	float3 B = tex2D(decal, VAR.t1.yw).xyz;
	float3 C = tex2D(decal, VAR.t1.zw).xyz;
	float3 D = tex2D(decal, VAR.t2.xw).xyz;
	float3 E = tex2D(decal, VAR.t2.yw).xyz;
	float3 F = tex2D(decal, VAR.t2.zw).xyz;
	float3 G = tex2D(decal, VAR.t3.xw).xyz;
	float3 H = tex2D(decal, VAR.t3.yw).xyz;
	float3 I = tex2D(decal, VAR.t3.zw).xyz;
	float3 J = tex2D(decal, VAR.t4.xy).xyz;
	float3 K = tex2D(decal, VAR.t4.zw).xyz;
	float3 L = tex2D(decal, VAR.t5.xy).xyz;
	float3 M = tex2D(decal, VAR.t5.zw).xyz;

	// equality checks
	bool eqBD = eq(B,D), eqBF = eq(B,F), eqHD = eq(H,D), eqHF = eq(H,F), eqEA = eq(E,A), eqEC = eq(E,C), eqEG = eq(E,G), eqEI = eq(E,I);

	bool cndE = neq(B,H) && neq(D,F);
	bool cndD = neq(A,G) && neq(E,K);
	bool cndB = neq(A,C) && neq(E,J);
	bool cndF = neq(C,I) && neq(E,L);
	bool cndH = neq(G,I) && neq(E,M);

	// rules
	float3 E0 = eqBD && (cndE || cndD && eqEG || cndB && eqEC) ? D : E;
	float3 E1 = cndE && (eqBD && !eqEC || eqBF && !eqEA) ? B : E;
	float3 E2 = eqBF && (cndE || cndF && eqEI || cndB && eqEA) ? F : E;
	float3 E3 = cndE && (eqBD && !eqEG || eqHD && !eqEA) ? D : E;
	float3 E5 = cndE && (eqBF && !eqEI || eqHF && !eqEC) ? F : E;
	float3 E6 = eqHD && (cndE || cndD && eqEA || cndH && eqEI) ? D : E;
	float3 E7 = cndE && (eqHD && !eqEI || eqHF && !eqEG) ? H : E;
	float3 E8 = eqHF && (cndE || cndF && eqEC || cndH && eqEG) ? F : E;

	// subpixel output
	return fp.y == 0 ? (fp.x == 0 ? E0 : fp.x == 1 ? E1 : E2) : (fp.y == 1 ? (fp.x == 0 ? E3 : fp.x == 1 ? E : E5) : (fp.x == 0 ? E6 : fp.x == 1 ? E7 : E8));
}
