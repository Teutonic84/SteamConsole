/*
	Scale2x Cleaner
	by Sp00kyFox, 2014

Filter:	Nearest
Scale:	1x

Removes the artifacts caused by Scale2x.

*/


bool eq(float3 A, float3 B){
	return all(A==B);
}

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};


struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;				// E
	OUT.t1 = texCoord.xyxy + float4(  0,-dy,-dx,  0);	// B, D
	OUT.t2 = texCoord.xyxy + float4( dx,  0,  0, dy);	// F, H

	return OUT;
}


float3 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	/*
		  B
		D E F
		  H
	*/

	// reading the texels
	float3 B = tex2D(decal, VAR.t1.xy).xyz;
	float3 D = tex2D(decal, VAR.t1.zw).xyz;
	float3 E = tex2D(decal, VAR.texCoord).xyz;
	float3 F = tex2D(decal, VAR.t2.xy).xyz;
	float3 H = tex2D(decal, VAR.t2.zw).xyz;

	// rule & output
	return eq(B,D) && eq(B,F) && eq(B,H) ? B : E;
}
