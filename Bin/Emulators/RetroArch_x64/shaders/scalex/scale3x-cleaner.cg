/*
	Scale3x Cleaner
	by Sp00kyFox, 2014

Removes the artifacts caused by Scale3x.

*/


bool eq(float3 A, float3 B){
	return all(A==B);
}

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};

struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
	float4 t3 : TEXCOORD3;
	float4 t4 : TEXCOORD4;
	float4 t5 : TEXCOORD5;
	float4 t6 : TEXCOORD6;
	float4 t7 : TEXCOORD7;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1 = texCoord.xxxy + float4(  -dx,    0,   dx,-2*dy);	// N, J, O
	OUT.t2 = texCoord.xxxy + float4(  -dx,    0,   dx,  -dy);	// A, B, C
	OUT.t3 = texCoord.xxxy + float4(  -dx,    0,   dx,    0);	// D, E, F
	OUT.t4 = texCoord.xxxy + float4(  -dx,    0,   dx,   dy);	// G, H, I
	OUT.t5 = texCoord.xxxy + float4(  -dx,    0,   dx, 2*dy);	// T, M, U
	OUT.t6 = texCoord.xyyy + float4(-2*dx,  -dy,    0,   dy);	// P, K, R
	OUT.t7 = texCoord.xyyy + float4( 2*dx,  -dy,    0,   dy);	// Q, L, S

	return OUT;
}


float3 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	/*
		  N J O
		P A B C Q
		K D E F L
		R G H I S
		  T M U
	*/

	// reading the texels
	float3 N = tex2D(decal, VAR.t1.xw).xyz;
	float3 J = tex2D(decal, VAR.t1.yw).xyz;
	float3 O = tex2D(decal, VAR.t1.zw).xyz;
	float3 A = tex2D(decal, VAR.t2.xw).xyz;
	float3 B = tex2D(decal, VAR.t2.yw).xyz;
	float3 C = tex2D(decal, VAR.t2.zw).xyz;
	float3 D = tex2D(decal, VAR.t3.xw).xyz;
	float3 E = tex2D(decal, VAR.t3.yw).xyz;
	float3 F = tex2D(decal, VAR.t3.zw).xyz;
	float3 G = tex2D(decal, VAR.t4.xw).xyz;
	float3 H = tex2D(decal, VAR.t4.yw).xyz;
	float3 I = tex2D(decal, VAR.t4.zw).xyz;
	float3 T = tex2D(decal, VAR.t5.xw).xyz;
	float3 M = tex2D(decal, VAR.t5.yw).xyz;
	float3 U = tex2D(decal, VAR.t5.zw).xyz;
	float3 P = tex2D(decal, VAR.t6.xy).xyz;
	float3 K = tex2D(decal, VAR.t6.xz).xyz;
	float3 R = tex2D(decal, VAR.t6.xw).xyz;
	float3 Q = tex2D(decal, VAR.t7.xy).xyz;
	float3 L = tex2D(decal, VAR.t7.xz).xyz;
	float3 S = tex2D(decal, VAR.t7.xw).xyz;

	// equality checks
	bool eqBD = eq(B,D), eqBF = eq(B,F), eqBG = eq(B,G), eqBH = eq(B,H), eqBI = eq(B,I), eqBM = eq(B,M), eqEB = eq(E,B), eqED = eq(E,D),
	     eqEF = eq(E,F), eqEH = eq(E,H), eqHA = eq(H,A), eqHC = eq(H,C), eqHD = eq(H,D), eqHF = eq(H,F), eqHJ = eq(H,J);

	bool eqEB_HACJ = eqEB && eqHA && eqHC && eqHJ;
	bool eqEH_BGIM = eqEH && eqBG && eqBI && eqBM;
	bool eqEA_HNP  = eq(E,A) && eq(H,N) && eq(H,P);
	bool eqEC_HOQ  = eq(E,C) && eq(H,O) && eq(H,Q);
	bool eqEG_BRT  = eq(E,G) && eq(B,R) && eq(B,T);
	bool eqEI_BSU  = eq(E,I) && eq(B,S) && eq(B,U);

	// rules
	bool outB = eqED && eq(B,A) && eqBF && eq(B,K) && (eqEH_BGIM || eqEG_BRT && eqBH)
		 || eqEF && eq(B,C) && eqBD && eq(B,L) && (eqEH_BGIM || eqEI_BSU && eqBH)
		 || eqEH && eqBD && eqBF && eqBM && (eqEG_BRT && eqBI || eqEI_BSU && eqBG);

	bool outH = eqED && eqHF && eq(H,G) && eq(H,K) && (eqEB_HACJ || eqEA_HNP && eqBH)
		 || eqEF && eqHD && eq(H,I) && eq(H,L) && (eqEB_HACJ || eqEC_HOQ && eqBH)
		 || eqEB && eqHD && eqHF && eqHJ && (eqEA_HNP && eqHC || eqEC_HOQ && eqHA);

	// output
	return outB ? B : outH ? H : E;
}
