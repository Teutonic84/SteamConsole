#pragma parameter SB_RED_THRESHOLD "Smart Blur Red Threshold" 0.2 0.0 0.6 0.01
#pragma parameter SB_GREEN_THRESHOLD "Smart Blur Green Threshold" 0.2 0.0 0.6 0.01
#pragma parameter SB_BLUE_THRESHOLD "Smart Blur Blue Threshold" 0.2 0.0 0.6 0.01
#ifdef PARAMETER_UNIFORM
uniform float SB_RED_THRESHOLD;
uniform float SB_GREEN_THRESHOLD;
uniform float SB_BLUE_THRESHOLD;
#else
#define SB_RED_THRESHOLD 0.2
#define SB_GREEN_THRESHOLD 0.2
#define SB_BLUE_THRESHOLD 0.2
#endif
// END PARAMETERS //

/* COMPATIBILITY
   - HLSL compilers
   - Cg   compilers
*/

/*
   Hyllian Smart-Blur Shader
  
   Copyright (C) 2011-2014 Hyllian/Jararaca - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

// Control the blur changing this param (RGB values). Below the threshold, blur is applied for each color channel.
// Threshold is the max color differency among the eight pixel neighbors from central pixel.


bool eq(float3 c1, float3 c2) {
    float3 df = abs(c1 - c2);
    return (df.r < SB_RED_THRESHOLD) && (df.g < SB_GREEN_THRESHOLD) && (df.b < SB_BLUE_THRESHOLD);
}


struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
        float  frame_count;
        float  frame_direction;
    float frame_rotation;
};

/*       
             B1
           A  B  C
       D0  D  E  F  F4
           G  H  I
             H5

*/


struct out_vertex {
    float2 texCoord : TEXCOORD0;
	float4 t1       : TEXCOORD1;
	float4 t2       : TEXCOORD2;
	float4 t3       : TEXCOORD3;
	float4 t4       : TEXCOORD4;
	float4 t5       : TEXCOORD5;
	float4 t6       : TEXCOORD6;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
    float4 position    : POSITION,
   out float4 oPosition : POSITION,
    float2 tex      : TEXCOORD0,

       uniform float4x4 modelViewProj,
    uniform input IN
)
{
    float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
    float dx = ps.x;
    float dy = ps.y;

   oPosition = mul(modelViewProj, position);

    out_vertex OUT = {
        tex,
        float4(tex,tex) + float4(    -dx,    -dy,     dx,    -dy), //  A  C
        float4(tex,tex) + float4(    -dx,    0.0,     dx,    0.0), //  D  F
        float4(tex,tex) + float4(    -dx,     dy,     dx,     dy), //  G  I
        float4(tex,tex) + float4(-2.0*dx,    0.0, 2.0*dx,    0.0), // D0 F4
        float4(tex,tex) + float4(    0.0,    -dy,    0.0,     dy), //  B  H
        float4(tex,tex) + float4(    0.0,-2.0*dy,    0.0, 2.0*dy)  // B1 H5
    };


    return OUT;
}


float4 main_fragment(in out_vertex VAR, uniform sampler2D s_p : TEXUNIT0, uniform input IN) : COLOR
{
  float3   E = tex2D(s_p, VAR.texCoord).xyz;

  float3   A = tex2D(s_p, VAR.t1.xy).xyz;
  float3   C = tex2D(s_p, VAR.t1.zw).xyz;
  float3   D = tex2D(s_p, VAR.t2.xy).xyz;
  float3   F = tex2D(s_p, VAR.t2.zw).xyz;
  float3   G = tex2D(s_p, VAR.t3.xy).xyz;
  float3   I = tex2D(s_p, VAR.t3.zw).xyz;
  float3  D0 = tex2D(s_p, VAR.t4.xy).xyz;
  float3  F4 = tex2D(s_p, VAR.t4.zw).xyz;
  float3   B = tex2D(s_p, VAR.t5.xy).xyz;
  float3   H = tex2D(s_p, VAR.t5.zw).xyz;
  float3  B1 = tex2D(s_p, VAR.t6.xy).xyz;
  float3  H5 = tex2D(s_p, VAR.t6.zw).xyz;

  float3 sum = 0.0;

    if (eq(E,F) && eq(E,H) && eq(E,I) && eq(E,B) && eq(E,C) && eq(E,A) && eq(E,D) && eq(E,G)) {
        sum = (E+A+C+D+F+G+I+D0+F4+B+H+B1+H5)/13.0;
        E = sum;
    }

  return float4(E, 1.0);
}

